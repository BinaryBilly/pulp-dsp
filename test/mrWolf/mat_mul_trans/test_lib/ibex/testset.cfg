import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.realpath(__file__), "../../../..")))
from pulp_dsp_test import SweepVariable, DynamicVariable
from pulp_dsp_test import Argument, ArrayArgument, FixPointArgument, OutputArgument
from pulp_dsp_test import generate_test

# Variables:
# ---------
# Can either be SweepVariable or Dynamic Variable. The name can then be used for the arguments (as
# value or as dimension).
#
# SweepVariable:   Type of variable which can be used to sweep over values.
# DynamicVariable: Variable that is determined by previously defined variables (SweepVariables or
#                  other Dynamic Variables). Dynamic variables need a funciton, which takes an
#                  environment as argument. This environment is a dictionary which maps the names
#                  of previously defined variables (position in the variables list) to their values.
#
# Arguments:
# ---------
# Defines the arguments of the funciton. These can be one of the following:
#
# Argument(name, type, value):
#     name: Name of the argument (as in function declaration)
#     type: Either a ctype, or 'var_type' | 'ret_type' when determined by the version
#     value: Either a number, the name of a Variable or None for a random value
# FixedPointArgument(name, type, value): Same as Argument, but only used for fixpoint implementation
# ArrayArgument(name, type, length, value)
#     name: Name of the argument (as in function declaration)
#     type: Either a ctype, or 'var_type' | 'ret_type' when determined by the version
#     length: Either a number, or the name of a Variable or a tuple for randint(min, max)
#     value: Either a number, the name of a Variable or None for a random value
# OutputArgument(name, type, length)
#     name: Name of the argument (as in function declaration)
#     type: Either a ctype, or 'var_type' | 'ret_type' when determined by the version
#     length: Either a number, or the name of a Variable or a tuple for randint(min, max)
#
# Implemented:
# -----------
# Dictionary which maps the function type (i8, i16, i32, q8, q16, q32, f32) to a boolean to tell
# if this version is implemented and should be tested.
#
# n_macs:
# -------
# Function with one parameter: env, which computes the number of macs based on the sweep variables.
# Parameter env is a dict, mapping the name of the variable to the value for the specific test.

device_name = 'ibex'
function_name = 'plp_mat_mult_trans'

variables = [
	SweepVariable('len_m', [24, 25]),
	SweepVariable('len_n', [24, 25, 26, 27]),
	SweepVariable('len_o', [24, 25]),
	DynamicVariable('len_srcA', lambda env: env['len_m'] * env['len_n'], visible=False),
	DynamicVariable('len_srcB', lambda env: env['len_n'] * env['len_o'], visible=False),
	DynamicVariable('len_res', lambda env: env['len_m'] * env['len_o'], visible=False),
]

arguments = [
	ArrayArgument('srcA', 'var_type', 'len_srcA', None),
	ArrayArgument('srcB', 'var_type', 'len_srcB', None),
	Argument('len_m', 'uint32_t', 'len_m'),
	Argument('len_n', 'uint32_t', 'len_n'),
	Argument('len_o', 'uint32_t', 'len_o'),
	OutputArgument('pRes', 'int32_t', 'len_res'),
]

implemented = {
	'i32': True,
	'i16': True,
	'i8':  True,
	'q32': False,
	'q16': False,
	'q8':  False,
	'f32': False
}

n_macs = lambda env: env['len_m'] * env['len_n'] * env['len_o']

TestConfig = c = generate_test(device_name, function_name, arguments, variables, implemented, n_macs=n_macs)