arguments = []
implemented = dict()

class argument(object):
	"""docstring for argument"""
	def __init__(self, name, a_type, length, arg_type, value):
		super(argument, self).__init__()
		self.name = name
		self.type = a_type
		self.length = length
		self.arg_type = arg_type
		self.value = value

def add_arg(name, type, length, arg_type ,value):
	arguments.append(argument(name, type, length, arg_type, value))

###############################################################
# 
# Function Defines Below this
# 
###############################################################

# Arguments consist of follwoing properties:
# name: 	spelled out name that argument should have
# type: 	type of the argument, can either be fixed by giving the type directly,
# 			or version dependent using 'var_type'
# lenght: 	defines lenght of argument 1 for single values, 2 or more for arrays
# arg_type: has following options:
# 			0:	random values that need to be generated
# 			1:	fixed initialized value
# 			2:	output arguments that need space to write to, but need not be initialized
# 				are always represented by a pointer (array of lenght 1 or more will be generated)
# 			3:	values that should be sweeped, give values to be tested in value field
# value:	value that should be used to initialize

FNAME = 'plp_dot_prod'

add_arg('v_a', 'var_type','length', 0, 0)
add_arg('v_b', 'var_type','length', 0, 0)
add_arg('length', 'int32_t', 1, 3, [3, 4, 5])
add_arg('comp_result','int32_t',1, 2, 0)

# set implemented version to true in list bellow:
implemented['i32']		= True
implemented['i16']		= True
implemented['i8']		= True
implemented['f32']		= True
# lacks fixed point support, as they have more arguments
# implemented['q32']		= False
# implemented['q16']		= False
# implemented['q8']		= False


###############################################################
# 
# Do not change below this line
# 
###############################################################

from plptest import *

TestConfig = c = {}

c['tests'] = [ ]

def check_output(config, output):
	
	# print(output)
	passed = False
	for item in output.split('\n'):
		if 'Test passed:' in item:
			# print(item)
			if item.find('1') != -1:
				passed = True
		elif 'Total cycles:' in item:
			print(item)
		elif 'Instructions:' in item:
			print(item)
		elif 'comp_result:' in item:
			print(item) # can be used for debug purposes

	# if output.find('Hello !') == -1:
		# return (False, "Didn't find output string")
	return (passed, None)

def add_test(name,flags):
	return Test(
		name = 'test %s' % name,
		commands = [
			Shell('clean', 'make clean %s' % (flags)),
			Shell('gen', 'make gen %s' % (flags)),
			Shell('build', 'make all %s' % (flags)),
			Shell('run', 'make run %s' % (flags)),
			Check('check', check_output)
		],
		timeout = 1000000
	)

def sweep_range(signature ,arglist, index, sweep_dict, var_type):
	if index < len(arglist):
		arg = arglist[index]
		if arg.arg_type == 3:
			for value in arg.value:
				new_sweep_dict = sweep_dict.copy()
				new_sweep_dict[arg.name] = value
				sweep_range(signature, arglist, index+1, new_sweep_dict, var_type)
		else:
			sweep_range(signature, arglist, index+1, sweep_dict, var_type)
	else:
		GARGS = ''
		for arg in arglist:
			# add variable name
			GARGS = GARGS + ' --arg ' + arg.name
			# add variable type
			if arg.type == 'var_type':
				GARGS = GARGS + ' ' + var_type
			else:
				GARGS = GARGS + ' ' + arg.type
			# add variable length
			if type(arg.length) == int:
				GARGS = GARGS + ' ' + str(arg.length)
			elif type(arg.length) == str:
				if arg.length in sweep_dict:
					# todo parse arg.length for arithmetic operations
					value = sweep_dict[arg.length]
					GARGS = GARGS + ' ' + str(value)
				else:
					print('%s has lenght that is not determined' % (arg.name))
			else:
				print('%s lenght neither string nor int')
			# add variable type and possible initialized value
			if arg.arg_type == 3:
				GARGS = GARGS + ' ' + str(1)
				GARGS = GARGS + ' ' + str(sweep_dict[arg.name])
			else:
				GARGS = GARGS + ' ' + str(arg.arg_type)
				GARGS = GARGS + ' ' + str(arg.value)

		GARGS = 'GARGS=\'' + GARGS + '\''
		BUILD_EXTENSION = 'BUILD_DIR_EXT=_test'
		test_name = FNAME + ' ' +  var_type
		for key, value in sweep_dict.items():
			test_name = test_name + ' ' + key + ' ' + str(value)
			BUILD_EXTENSION = BUILD_EXTENSION + var_type + str(value)

		FLAGS = signature + ' ' + GARGS + ' ' + BUILD_EXTENSION
		# print(FLAGS)
		c['tests'].append(add_test(test_name, FLAGS))

for version, status in implemented.items():
	if status:
		FSIG = ''
		for arg in arguments:
			if FSIG == '':
				FSIG = arg.name
			else:
				FSIG = FSIG + ', ' + arg.name

		FSIG = FNAME + '_' + version + '(' + FSIG + ')'
		FSIG = 'FSIG=\'-D FSIG=\"' + FSIG + '\"\''

		# print(FSIG)

		if version == 'i32' or version == 'q32':
			var_type = 'int32_t'
		elif version == 'i16' or version == 'q16':
			var_type = 'int16_t'
		elif version == 'i8' or version == 'q8':
			var_type = 'int8_t'
		else:
			var_type = 'float'

		sweep_range(FSIG, arguments, 0, dict(), var_type)